##############################################################################
# Filter subsystem
#
# This properties file contains the configuration for the filter subsystem
##############################################################################

# Enable the filter subsystem
org.aksw.gerbil.util.filter.enabled=True

# Caching
# Cache everything;
# Note: Use it, it will speed up the overall process despite that a first filter run is
# done at start up to generate various metadata.
org.aksw.gerbil.util.filter.cache=True
org.aksw.gerbil.util.filter.cachelocation=${org.aksw.gerbil.DataPath}/cache/filter

# Whitelist
# Reduce the search amount, by blacklist everything that is not in this list.
# An empty list means no constraints. Note: IRIs are checked via contains.
org.aksw.gerbil.util.filter.whitelist=dbpedia.org

# Prefixes
# Provide prefixes for filter using SPARQL queries.
# Note: All filter takes this prefix set, but it is up to the filter to use it.
org.aksw.gerbil.util.filter.prefix.1=dbo:<http://dbpedia.org/ontology/>
org.aksw.gerbil.util.filter.prefix.2=foaf:<http://xmlns.com/foaf/0.1/>
org.aksw.gerbil.util.filter.prefix.3=rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>

# Chunking
# To split the requested entities into chunks use the chunk property.
# Note: Every filter has it's own definition.

# Basic SPARQL filter
# This basic filter uses some kind of SPARQL query as filter definition.
# Queries a prepended with previous defined prefixes.
# Use '##' as entity mark. Means the filter expands this mark with all provided IRIs
# using '<' '>'.
# As service provide a SPARQL endpoint.
# Note: ?v is the only evaluated result.
org.aksw.gerbil.util.filter.1.name=Filter Persons
org.aksw.gerbil.util.filter.1.service=http://dbpedia.org/sparql
org.aksw.gerbil.util.filter.1.filter=select distinct ?v where { values ?v {##} . ?v rdf:type foaf:Person . }
org.aksw.gerbil.util.filter.1.chunk=50

org.aksw.gerbil.util.filter.2.name=Filter Places
org.aksw.gerbil.util.filter.2.service=http://dbpedia.org/sparql
org.aksw.gerbil.util.filter.2.filter=select distinct ?v where { values ?v {##} . ?v rdf:type dbo:Place . }
org.aksw.gerbil.util.filter.2.chunk=50

org.aksw.gerbil.util.filter.3.name=Filter Organizations
org.aksw.gerbil.util.filter.3.service=http://dbpedia.org/sparql
org.aksw.gerbil.util.filter.3.filter=select distinct ?v where { values ?v {##} . ?v rdf:type dbo:Organisation . }
org.aksw.gerbil.util.filter.3.chunk=50

# Popularity filter
# This filter uses ranking files to decide which entities remain.
# We provide pagerank and hitscore. Provide more on your own by using the create-scores.sh in folder resources/scripts
# The script collects all entities from the datasets and and ranks them with your score file. At last it splits it
# into 5 pieces each representing an interval, see below.
#
# As service provide the base path of the interval files.
# As filter definition provide one or multiple intervals.
#   0 - returns entities between 0 and 10% the most popular entities
#   1 - returns entities between 10% and 32,5%
#   2 - returns entities between 32,5% and 55%
#   3 - returns entities between 55% and 77,5%
#   4 - returns entities between 77,5% and 100% the most unpopular entities
#
# Developer notes: The popularity filter use as backend perl scripts for faster text processing.
# You can easily provide other search algorithms by replacing the current perl script.
# The script is entity-filter.pl located under resources/scripts.
# Look at this script for further information's about how you get and return the entities.
org.aksw.gerbil.util.filter.pop.1.name=Filter Pagerank 10%
org.aksw.gerbil.util.filter.pop.1.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_pagerank_scores_en_2015
org.aksw.gerbil.util.filter.pop.1.filter=0
org.aksw.gerbil.util.filter.pop.1.chunk=500

org.aksw.gerbil.util.filter.pop.2.name=Filter Pagerank 10%-55%
org.aksw.gerbil.util.filter.pop.2.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_pagerank_scores_en_2015
org.aksw.gerbil.util.filter.pop.2.filter=1,2
org.aksw.gerbil.util.filter.pop.2.chunk=500

org.aksw.gerbil.util.filter.pop.3.name=Filter Pagerank 55%-100%
org.aksw.gerbil.util.filter.pop.3.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_pagerank_scores_en_2015
org.aksw.gerbil.util.filter.pop.3.filter=3,4
org.aksw.gerbil.util.filter.pop.3.chunk=500

org.aksw.gerbil.util.filter.pop.4.name=Filter Hitsscore 10%
org.aksw.gerbil.util.filter.pop.4.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_hits_scores_en_2015
org.aksw.gerbil.util.filter.pop.4.filter=0
org.aksw.gerbil.util.filter.pop.4.chunk=500

org.aksw.gerbil.util.filter.pop.5.name=Filter Hitsscore 10%-55%
org.aksw.gerbil.util.filter.pop.5.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_hits_scores_en_2015
org.aksw.gerbil.util.filter.pop.5.filter=1,2
org.aksw.gerbil.util.filter.pop.5.chunk=500

org.aksw.gerbil.util.filter.pop.6.name=Filter Hitsscore 55%-100%
org.aksw.gerbil.util.filter.pop.6.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_hits_scores_en_2015
org.aksw.gerbil.util.filter.pop.6.filter=3,4
org.aksw.gerbil.util.filter.pop.6.chunk=500

# File SPARQL Filter
# It works exactly as the basic SPARQL filter but uses a file as knowledge base instead of an SPARQL endpoint.
#org.aksw.gerbil.util.filter.file.1.name=Filter Popularity
#org.aksw.gerbil.util.filter.file.1.filter=select distinct ?v ?pagerank WHERE { values ?v {##} ?v dbpedia-owl:wikiPageRank ?pagerank . } ORDER BY DESC (?pagerank)
#org.aksw.gerbil.util.filter.file.1.service=${org.aksw.gerbil.DataPath}/resources/filter/pagerank_scores_reduced_en_2015.ttl
#org.aksw.gerbil.util.filter.file.1.chunk=50
