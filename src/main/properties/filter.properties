###############################################dataset###############################
# This properties file contains the filter configurations                    #
##############################################################################


# A filter uses a backend service to retrieve the entity types
# as default we use dbpedia live
org.aksw.gerbil.util.filter.service=http://dbpedia.org/sparql

# To shorten the type definitions we use the sparql prefix set
org.aksw.gerbil.util.filter.prefix.1=dbpedia-owl:<http://dbpedia.org/ontology/>
org.aksw.gerbil.util.filter.prefix.2=type:<http://dbpedia.org/class/yago/>
org.aksw.gerbil.util.filter.prefix.3=foaf:<http://xmlns.com/foaf/0.1/>

# A basic filter contains of a name and a type filter
org.aksw.gerbil.util.filter.basic.1.name=filter persons
org.aksw.gerbil.util.filter.basic.1.filter=dbpedia-owl:Person

# An advanced filter contains a name and a special filter property
# now we support 'pop' means popular entities and 'unpop' means
# unpopular entities based on a TextRank algorithm
org.aksw.gerbil.util.filter.advanced.1.name=Popularity Filter
org.aksw.gerbil.util.filter.advanced.1.filter=pop
org.aksw.gerbil.util.filter.advanced.2.name=Unpopularity Filter
org.aksw.gerbil.util.filter.advanced.2.filter=unpop

# A composed filter contains a name and an equotation based on the
# set theory with basic and advanced filters as sets.
# all partial filters have to be declared before
org.aksw.gerbil.util.filter.compose.1.name=non human
org.aksw.gerbil.util.filter.compose.1.filter=not dbpedial-owl:person and unpop