###############################################dataset###############################
# This properties file contains the filter configurations                    #
##############################################################################

# enable entity filter subsystem
org.aksw.gerbil.util.filter.enabled=True
# all annotator results and gold standards are cached
# Flagging precache true and cache false will be useless resource consumption
org.aksw.gerbil.util.filter.cache=True
org.aksw.gerbil.util.filter.precache=True
org.aksw.gerbil.util.filter.cachelocation=${org.aksw.gerbil.DataPath}/cache/filter

# A filter uses a backend service to retrieve the entity types
# as default we use dbpedia live
org.aksw.gerbil.util.filter.service=http://dbpedia.org/sparql
# some datasets are very huge; chunk them into smaller parts
org.aksw.gerbil.util.filter.chunk=25
# provide a whitelist for entity URI's known to the knowledge base
# all entities with URI's different from these provided here are deleted from annotator results and gold standard
# an empty whitelist is interpreted as all entities are allowed
org.aksw.gerbil.util.filter.whitelist=http://dbpedia.org/

# To shorten the type definitions we use the sparql prefix set
org.aksw.gerbil.util.filter.prefix.1=dbo:<http://dbpedia.org/ontology/>
org.aksw.gerbil.util.filter.prefix.2=foaf:<http://xmlns.com/foaf/0.1/>
org.aksw.gerbil.util.filter.prefix.3=rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>

# A normal filter consists of a name and a SPARQL query which will be used for querying the service.
# A query should have the '?v' as the only output result and we use the '{##}' mark for replacing
# ?v with the given entity URI's. The rest is up to you.
org.aksw.gerbil.util.filter.1.name=filter persons
# org.aksw.gerbil.util.filter.1.service=
org.aksw.gerbil.util.filter.1.filter=select distinct ?v where { values ?v {##} . ?v rdf:type foaf:Person . }
org.aksw.gerbil.util.filter.2.name=filter places
org.aksw.gerbil.util.filter.2.filter=select distinct ?v where { values ?v {##} . ?v rdf:type dbo:Place . }

# A file based filter takes a RDF file as backend knowledge base
org.aksw.gerbil.util.filter.file.1.name=file filter popularity
org.aksw.gerbil.util.filter.file.1.filter=SELECT DISTINCT ?resource ?pagerank WHERE { ?resource dbpedia-owl:wikiPageRank ?pagerank . } ORDER BY DESC (?pagerank) LIMIT 100
org.aksw.gerbil.util.filter.file.1.files=${org.aksw.gerbil.DataPath}/resources/filter/
