###############################################dataset###############################
# This properties file contains the filter configurations                    #
##############################################################################

# enable entity filter subsystem
org.aksw.gerbil.util.filter.enabled=True
# all annotator results and gold standards are cached
# Flagging precache true and cache false will be useless resource consumption
org.aksw.gerbil.util.filter.cache=True
org.aksw.gerbil.util.filter.precache=False
org.aksw.gerbil.util.filter.cachelocation=${org.aksw.gerbil.DataPath}/cache/filter

# some datasets are very huge; chunk them into smaller parts
org.aksw.gerbil.util.filter.chunk=25
# provide a whitelist for entity URI's known to the knowledge base
# all entities with URI's different from these provided here are deleted from annotator results and gold standard
# an empty whitelist is interpreted as all entities are allowed
org.aksw.gerbil.util.filter.whitelist=http://dbpedia.org/

# To shorten the type definitions we use the sparql prefix set
org.aksw.gerbil.util.filter.prefix.1=dbo:<http://dbpedia.org/ontology/>
org.aksw.gerbil.util.filter.prefix.2=foaf:<http://xmlns.com/foaf/0.1/>
org.aksw.gerbil.util.filter.prefix.3=rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>

# A normal filter consists of a name and a SPARQL query which will be used for querying the service.
# Only '?v' is taken from the query result and we use the '{##}' mark for replacing
# ?v with the given entity URI's. The rest is up to you.
# A filter uses a backend service to retrieve the entity types
org.aksw.gerbil.util.filter.1.name=Filter Persons
org.aksw.gerbil.util.filter.1.service=http://dbpedia.org/sparql
org.aksw.gerbil.util.filter.1.filter=select distinct ?v where { values ?v {##} . ?v rdf:type foaf:Person . }

org.aksw.gerbil.util.filter.2.name=Filter Places
org.aksw.gerbil.util.filter.2.service=http://dbpedia.org/sparql
org.aksw.gerbil.util.filter.2.filter=select distinct ?v where { values ?v {##} . ?v rdf:type dbo:Place . }

org.aksw.gerbil.util.filter.3.name=Filter Organizations
org.aksw.gerbil.util.filter.3.service=http://dbpedia.org/sparql
org.aksw.gerbil.util.filter.3.filter=select distinct ?v where { values ?v {##} . ?v rdf:type dbo:Organisation . }

# popularity filters ranks the entities and provides intervals for you to choose
#
# ranks are either pagerank or hitsscore (you can provide more ranks if you create a score backend file)
# a score file is created out of all provided datasets under gerbil_data/datasets
# first collect all entities then build tuples with the corresponding scores in descending order
# This limits full functionality only to the provided datasets and not to uploaded datasets.
# This might be work partially depending on the entities and if there are stored in the score files.
#
# As service give a score file.
# As filter provide a one or more of these:
#   0 - returns entities between 0 and 10% the most popular entities
#   1 - returns entities between 10% and 32,5%
#   2 - returns entities between 32,5% and 55%
#   3 - returns entities between 55% and 77,5%
#   4 - returns entities between 77,5% and 100%
org.aksw.gerbil.util.filter.pop.1.name=Filter Pagerank 10%
org.aksw.gerbil.util.filter.pop.1.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_pagerank_scores_en_2015
org.aksw.gerbil.util.filter.pop.1.filter=0

org.aksw.gerbil.util.filter.pop.2.name=Filter Pagerank 10%-55%
org.aksw.gerbil.util.filter.pop.2.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_pagerank_scores_en_2015
org.aksw.gerbil.util.filter.pop.2.filter=1,2

org.aksw.gerbil.util.filter.pop.3.name=Filter Pagerank 55%-100%
org.aksw.gerbil.util.filter.pop.3.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_pagerank_scores_en_2015
org.aksw.gerbil.util.filter.pop.3.filter=3,4

org.aksw.gerbil.util.filter.pop.4.name=Filter Hitsscore 10%
org.aksw.gerbil.util.filter.pop.4.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_hits_scores_en_2015
org.aksw.gerbil.util.filter.pop.4.filter=0

org.aksw.gerbil.util.filter.pop.5.name=Filter Hitsscore 10%-55%
org.aksw.gerbil.util.filter.pop.5.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_hits_scores_en_2015
org.aksw.gerbil.util.filter.pop.5.filter=1,2

org.aksw.gerbil.util.filter.pop.6.name=Filter Hitsscore 55%-100%
org.aksw.gerbil.util.filter.pop.6.service=${org.aksw.gerbil.DataPath}/resources/filter/ranked_hits_scores_en_2015
org.aksw.gerbil.util.filter.pop.6.filter=3,4

# A file based filter takes a RDF file as backend knowledge base
#org.aksw.gerbil.util.filter.file.1.name=Filter Popularity
#org.aksw.gerbil.util.filter.file.1.filter=select distinct ?v ?pagerank WHERE { values ?v {##} ?v dbpedia-owl:wikiPageRank ?pagerank . } ORDER BY DESC (?pagerank)
#org.aksw.gerbil.util.filter.file.1.service=${org.aksw.gerbil.DataPath}/resources/filter/pagerank_scores_reduced_en_2015.ttl

