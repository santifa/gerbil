###############################################dataset###############################
# This properties file contains the filter configurations                    #
##############################################################################

# all annotator results and gold standards are cached
org.aksw.gerbil.util.filter.cache=True
# pre cache gold standard if not already cached
org.aksw.gerbil.util.filter.precache=True
org.aksw.gerbil.util.filter.cachelocation=${org.aksw.gerbil.DataPath}/cache/filter

# A filter uses a backend service to retrieve the entity types
# as default we use dbpedia live
org.aksw.gerbil.util.filter.service=http://dbpedia.org/sparql

# filter strategy
# keep - entities not found in the service knowledgebase are kept for evaluation
# remove - entities not found in the servie knowledgebase are removed for evaluation
# org.aksw.gerbil.util.filter.strategy=delete

# To shorten the type definitions we use the sparql prefix set
org.aksw.gerbil.util.filter.prefix.1=dbo:<http://dbpedia.org/ontology/>
org.aksw.gerbil.util.filter.prefix.2=foaf:<http://xmlns.com/foaf/0.1/>
org.aksw.gerbil.util.filter.prefix.3=rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>

# A normal filter consists of a name and a SPARQL query which will be used for querying the service.
# A query should have the '?v' as the only output result and we use the '{##}' mark for replacing
# ?v with the given entity URI's. The rest is up to you.
org.aksw.gerbil.util.filter.1.name=filter persons
org.aksw.gerbil.util.filter.1.filter=select distinct ?v where { values ?v {##} . ?v rdf:type foaf:Person . }
org.aksw.gerbil.util.filter.2.name=filter places
org.aksw.gerbil.util.filter.2.filter=select distinct ?v where { values ?v {##} . ?v rdf:type dbo:Place . }
